apiVersion: apps/v1
kind: Deployment
metadata:
  name: recruitment-api
  namespace: recruitment-platform
  labels:
    app: recruitment-api
    component: backend
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: recruitment-api
  template:
    metadata:
      labels:
        app: recruitment-api
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: api
        image: ghcr.io/your-org/recruitment-platform/backend:latest
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "Production"
        - name: ASPNETCORE_URLS
          value: "http://+:80"
        - name: ConnectionStrings__DefaultConnection
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: connection-string
        - name: JWT__Secret
          valueFrom:
            secretKeyRef:
              name: jwt-secrets
              key: secret
        - name: Redis__ConnectionString
          valueFrom:
            configMapKeyRef:
              name: redis-config
              key: connection-string
        - name: MinIO__Endpoint
          valueFrom:
            configMapKeyRef:
              name: minio-config
              key: endpoint
        - name: MinIO__AccessKey
          valueFrom:
            secretKeyRef:
              name: minio-secrets
              key: access-key
        - name: MinIO__SecretKey
          valueFrom:
            secretKeyRef:
              name: minio-secrets
              key: secret-key
        - name: RabbitMQ__Host
          valueFrom:
            configMapKeyRef:
              name: rabbitmq-config
              key: host
        - name: Elasticsearch__Url
          valueFrom:
            configMapKeyRef:
              name: elasticsearch-config
              key: url
        - name: AI__CVParser__BaseUrl
          value: "http://ai-cv-parser:80"
        - name: AI__JobMatcher__BaseUrl
          value: "http://ai-job-matcher:80"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: logs
        emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000

---
apiVersion: v1
kind: Service
metadata:
  name: recruitment-api-service
  namespace: recruitment-platform
  labels:
    app: recruitment-api
spec:
  selector:
    app: recruitment-api
  ports:
  - name: http
    port: 80
    targetPort: 80
  - name: https
    port: 443
    targetPort: 443
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: recruitment-api-ingress
  namespace: recruitment-platform
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.yourplatform.com
    secretName: recruitment-api-tls
  rules:
  - host: api.yourplatform.com
    http:
      paths:
      - path: /api(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: recruitment-api-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: recruitment-api-hpa
  namespace: recruitment-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: recruitment-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60